{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sgevatschnaider/machine-learning/blob/main/notebooks/Educacion_IT_Modulo_I_Inteligencia%20Artificial.ipynb.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Solicitar al usuario el nombre del módulo\n",
        "modulo = input(\"Ingrese el nombre del módulo: \")\n",
        "\n",
        "html_content = f\"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Material de Autoría</title>\n",
        "    <style>\n",
        "        body {{\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            color: #333;\n",
        "            text-align: center;\n",
        "        }}\n",
        "        .footer {{\n",
        "            font-size: 1.2em;\n",
        "            color: #555;\n",
        "            margin-top: 50px;\n",
        "        }}\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <div class=\"footer\">\n",
        "        <p><em>Material elaborado por el profesor Sergio Gevatschnaider</em></p>\n",
        "        <p><em>Material adicional clases Educación IT</em></p>\n",
        "        <p><strong>Módulo:</strong> {modulo}</p>\n",
        "    </div>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "id": "qrc5Gr8DHoZw",
        "outputId": "72acd935-7f4a-429f-992c-dd2e64a3135f"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Ingrese el nombre del módulo: 1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Material de Autoría</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            color: #333;\n",
              "            text-align: center;\n",
              "        }\n",
              "        .footer {\n",
              "            font-size: 1.2em;\n",
              "            color: #555;\n",
              "            margin-top: 50px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <div class=\"footer\">\n",
              "        <p><em>Material elaborado por el profesor Sergio Gevatschnaider</em></p>\n",
              "        <p><em>Material adicional clases Educación IT</em></p>\n",
              "        <p><strong>Módulo:</strong> 1</p>\n",
              "    </div>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "qrc5Gr8DHoZw"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8122f3ac",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8122f3ac",
        "outputId": "d4400fa2-c5ca-4254-81f1-dcbcc8f15acf"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Índice de Inteligencia Artificial</title>\n",
              "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: 'Roboto', Arial, sans-serif;\n",
              "            line-height: 1.8;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            color: #333;\n",
              "        }\n",
              "        h1, h2, h3 {\n",
              "            color: #2c3e50;\n",
              "        }\n",
              "        h1 {\n",
              "            font-size: 2.5em;\n",
              "            text-align: center;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            font-size: 2em;\n",
              "            margin-top: 40px;\n",
              "            color: #2980b9;\n",
              "        }\n",
              "        h3 {\n",
              "            font-size: 1.6em;\n",
              "            margin-top: 30px;\n",
              "            color: #2980b9;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.2em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: square;\n",
              "            margin-left: 30px;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Índice de Inteligencia Artificial</h1>\n",
              "\n",
              "    <h2>1. Introducción a la Inteligencia Artificial</h2>\n",
              "    <ul>\n",
              "        <li>IA como Revolución Social e Industrial</li>\n",
              "        <li>Impacto de la Tecnología en la Transmisión del Conocimiento</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>2. Conceptos Fundamentales de la Inteligencia Artificial</h2>\n",
              "    <ul>\n",
              "        <li>Definición de Inteligencia Artificial</li>\n",
              "        <li>Disciplinas Relacionadas con la IA (Informática, Lógica, Matemáticas, Filosofía)</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>3. Historia y Evolución de la IA</h2>\n",
              "    <ul>\n",
              "        <li>Orígenes Filosóficos (Aristóteles, Raimundo Lulio)</li>\n",
              "        <li>Avances en la Lógica y Matemáticas (Leibniz, Boole)</li>\n",
              "        <li>Turing y el Concepto de Computación</li>\n",
              "        <li>Modelos Iniciales de Neuronas Artificiales (McCulloch y Pitts)</li>\n",
              "        <li>Primeros Modelos de Aprendizaje (Perceptrón de Rosenblatt)</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>4. Desarrollos Clave en IA y Machine Learning</h2>\n",
              "    <ul>\n",
              "        <li>Primeros Programas de Aprendizaje (Arthur Samuel)</li>\n",
              "        <li>Nacimiento del Término \"Inteligencia Artificial\" (Conferencia de Dartmouth)</li>\n",
              "        <li>Segunda Generación de Computadoras y Uso de Transistores</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>5. Surgimiento de los Algoritmos y Técnicas de IA</h2>\n",
              "    <ul>\n",
              "        <li>Sistemas Expertos y Algoritmos de Reconocimiento de Patrones</li>\n",
              "        <li>Algoritmos Genéticos y Aprendizaje Basado en Explicación</li>\n",
              "        <li>Evolución del Aprendizaje Automático en la Década de los 90</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>6. Era del Deep Learning</h2>\n",
              "    <ul>\n",
              "        <li>Definición y Avances del Deep Learning (Geoffrey Hinton)</li>\n",
              "        <li>Uso de GPUs para Cálculo en Redes Neuronales</li>\n",
              "        <li>Arquitecturas Profundas y Aprendizaje de Representaciones</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>7. Casos de Estudio en IA</h2>\n",
              "    <ul>\n",
              "        <li>IBM Watson en Jeopardy!</li>\n",
              "        <li>Google DeepMind y AlphaGo en el Juego de Go</li>\n",
              "        <li>Impacto de los Modelos de IA en la Vida Cotidiana</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>8. Presente y Futuro de la IA</h2>\n",
              "    <ul>\n",
              "        <li>Obstáculos Técnicos y Avances en Capacidad de Cómputo</li>\n",
              "        <li>Big Data y Escalabilidad en Computación</li>\n",
              "        <li>Aplicaciones Actuales de la IA (Diagnóstico Médico, Traducción, Descubrimientos Científicos)</li>\n",
              "    </ul>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML del índice\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Índice de Inteligencia Artificial</title>\n",
        "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: 'Roboto', Arial, sans-serif;\n",
        "            line-height: 1.8;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            color: #333;\n",
        "        }\n",
        "        h1, h2, h3 {\n",
        "            color: #2c3e50;\n",
        "        }\n",
        "        h1 {\n",
        "            font-size: 2.5em;\n",
        "            text-align: center;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            font-size: 2em;\n",
        "            margin-top: 40px;\n",
        "            color: #2980b9;\n",
        "        }\n",
        "        h3 {\n",
        "            font-size: 1.6em;\n",
        "            margin-top: 30px;\n",
        "            color: #2980b9;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.2em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: square;\n",
        "            margin-left: 30px;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Índice de Inteligencia Artificial</h1>\n",
        "\n",
        "    <h2>1. Introducción a la Inteligencia Artificial</h2>\n",
        "    <ul>\n",
        "        <li>IA como Revolución Social e Industrial</li>\n",
        "        <li>Impacto de la Tecnología en la Transmisión del Conocimiento</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>2. Conceptos Fundamentales de la Inteligencia Artificial</h2>\n",
        "    <ul>\n",
        "        <li>Definición de Inteligencia Artificial</li>\n",
        "        <li>Disciplinas Relacionadas con la IA (Informática, Lógica, Matemáticas, Filosofía)</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>3. Historia y Evolución de la IA</h2>\n",
        "    <ul>\n",
        "        <li>Orígenes Filosóficos (Aristóteles, Raimundo Lulio)</li>\n",
        "        <li>Avances en la Lógica y Matemáticas (Leibniz, Boole)</li>\n",
        "        <li>Turing y el Concepto de Computación</li>\n",
        "        <li>Modelos Iniciales de Neuronas Artificiales (McCulloch y Pitts)</li>\n",
        "        <li>Primeros Modelos de Aprendizaje (Perceptrón de Rosenblatt)</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>4. Desarrollos Clave en IA y Machine Learning</h2>\n",
        "    <ul>\n",
        "        <li>Primeros Programas de Aprendizaje (Arthur Samuel)</li>\n",
        "        <li>Nacimiento del Término \"Inteligencia Artificial\" (Conferencia de Dartmouth)</li>\n",
        "        <li>Segunda Generación de Computadoras y Uso de Transistores</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>5. Surgimiento de los Algoritmos y Técnicas de IA</h2>\n",
        "    <ul>\n",
        "        <li>Sistemas Expertos y Algoritmos de Reconocimiento de Patrones</li>\n",
        "        <li>Algoritmos Genéticos y Aprendizaje Basado en Explicación</li>\n",
        "        <li>Evolución del Aprendizaje Automático en la Década de los 90</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>6. Era del Deep Learning</h2>\n",
        "    <ul>\n",
        "        <li>Definición y Avances del Deep Learning (Geoffrey Hinton)</li>\n",
        "        <li>Uso de GPUs para Cálculo en Redes Neuronales</li>\n",
        "        <li>Arquitecturas Profundas y Aprendizaje de Representaciones</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>7. Casos de Estudio en IA</h2>\n",
        "    <ul>\n",
        "        <li>IBM Watson en Jeopardy!</li>\n",
        "        <li>Google DeepMind y AlphaGo en el Juego de Go</li>\n",
        "        <li>Impacto de los Modelos de IA en la Vida Cotidiana</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>8. Presente y Futuro de la IA</h2>\n",
        "    <ul>\n",
        "        <li>Obstáculos Técnicos y Avances en Capacidad de Cómputo</li>\n",
        "        <li>Big Data y Escalabilidad en Computación</li>\n",
        "        <li>Aplicaciones Actuales de la IA (Diagnóstico Médico, Traducción, Descubrimientos Científicos)</li>\n",
        "    </ul>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Colab\n",
        "display(HTML(html_content))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "64313496",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 594
        },
        "id": "64313496",
        "outputId": "75053e8c-2f16-4726-d59b-219eb9d0fc99"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (5.24.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly) (24.1)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"51f95246-1ba8-4ade-8df5-b0385cd1ff1c\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"51f95246-1ba8-4ade-8df5-b0385cd1ff1c\")) {                    Plotly.newPlot(                        \"51f95246-1ba8-4ade-8df5-b0385cd1ff1c\",                        [{\"hovertemplate\":\"variable=Revolución\\u003cbr\\u003eAño=%{x}\\u003cbr\\u003evalue=%{y}\\u003cbr\\u003eDescripción=%{text}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Revolución\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\",\"line\":{\"color\":\"DarkSlateGrey\",\"width\":2},\"size\":15},\"mode\":\"markers+text\",\"name\":\"Revolución\",\"orientation\":\"h\",\"showlegend\":true,\"text\":[\"Herramientas primitivas para cazar y defenderse\",\"Transición de nómadas a sociedades agrícolas\",\"Industrialización y crecimiento de ciudades\",\"Electricidad como base de nuevas tecnologías\",\"Computación y comunicación digital\",\"Automatización y sistemas inteligentes\"],\"x\":[-300000,-10000,1760,1880,1960,2000],\"xaxis\":\"x\",\"y\":[\"Tecnología Lítica\",\"Agricultura\",\"Revolución Industrial\",\"Electricidad\",\"Revolución Digital\",\"Inteligencia Artificial\"],\"yaxis\":\"y\",\"type\":\"scatter\",\"textposition\":\"top center\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Año\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Revolución\"}},\"legend\":{\"title\":{\"text\":\"variable\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Línea de Tiempo de Revoluciones Tecnológicas\"},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('51f95246-1ba8-4ade-8df5-b0385cd1ff1c');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Instala plotly en caso de que no esté instalado\n",
        "!pip install plotly\n",
        "\n",
        "\n",
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "\n",
        "# Datos históricos de revoluciones tecnológicas\n",
        "data = {\n",
        "    \"Revolución\": [\n",
        "        \"Tecnología Lítica\",\n",
        "        \"Agricultura\",\n",
        "        \"Revolución Industrial\",\n",
        "        \"Electricidad\",\n",
        "        \"Revolución Digital\",\n",
        "        \"Inteligencia Artificial\"\n",
        "    ],\n",
        "    \"Descripción\": [\n",
        "        \"Herramientas primitivas para cazar y defenderse\",\n",
        "        \"Transición de nómadas a sociedades agrícolas\",\n",
        "        \"Industrialización y crecimiento de ciudades\",\n",
        "        \"Electricidad como base de nuevas tecnologías\",\n",
        "        \"Computación y comunicación digital\",\n",
        "        \"Automatización y sistemas inteligentes\"\n",
        "    ],\n",
        "    \"Año\": [\n",
        "        -300000,  # Tecnología Lítica\n",
        "        -10000,   # Agricultura\n",
        "        1760,     # Revolución Industrial\n",
        "        1880,     # Electricidad\n",
        "        1960,     # Revolución Digital\n",
        "        2000      # Inteligencia Artificial\n",
        "    ]\n",
        "}\n",
        "\n",
        "# Creación del DataFrame\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Crear la visualización de la línea de tiempo con Plotly\n",
        "fig = px.scatter(\n",
        "    df,\n",
        "    x=\"Año\",\n",
        "    y=[\"Revolución\"]*len(df),\n",
        "    text=\"Descripción\",\n",
        "    labels={\"y\": \"Revolución\"},\n",
        "    title=\"Línea de Tiempo de Revoluciones Tecnológicas\",\n",
        "    template=\"plotly_white\"\n",
        ")\n",
        "\n",
        "# Personalización de la visualización\n",
        "fig.update_traces(\n",
        "    marker=dict(size=15, line=dict(width=2, color=\"DarkSlateGrey\")),\n",
        "    selector=dict(mode=\"markers+text\"),\n",
        "    textposition=\"top center\"\n",
        ")\n",
        "\n",
        "fig.update_layout(\n",
        "    xaxis_title=\"Año\",\n",
        "    yaxis_title=\"Revolución\",\n",
        "    showlegend=False\n",
        ")\n",
        "\n",
        "# Mostrar el gráfico\n",
        "fig.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Alan Turing y el Concepto de Computación</title>\n",
        "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: 'Roboto', Arial, sans-serif;\n",
        "            line-height: 1.8;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            color: #333;\n",
        "        }\n",
        "        h1, h2, h3 {\n",
        "            color: #2c3e50;\n",
        "        }\n",
        "        h1 {\n",
        "            font-size: 2.5em;\n",
        "            text-align: center;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            font-size: 2em;\n",
        "            margin-top: 40px;\n",
        "            color: #2980b9;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.2em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: square;\n",
        "            margin-left: 30px;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        .highlight {\n",
        "            background-color: #ffeb3b;\n",
        "            padding: 2px 5px;\n",
        "            border-radius: 3px;\n",
        "            font-weight: bold;\n",
        "        }\n",
        "        .button {\n",
        "            display: inline-block;\n",
        "            margin-top: 30px;\n",
        "            padding: 10px 20px;\n",
        "            font-size: 1.2em;\n",
        "            color: #fff;\n",
        "            background-color: #2980b9;\n",
        "            text-align: center;\n",
        "            border-radius: 5px;\n",
        "            text-decoration: none;\n",
        "        }\n",
        "        .button:hover {\n",
        "            background-color: #1f5d8c;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Alan Turing y el Concepto de Computación</h1>\n",
        "\n",
        "    <h2>1. La Máquina de Turing: Concepto Básico</h2>\n",
        "    <p>En 1936, Turing publicó un artículo titulado <em>\"On Computable Numbers, with an Application to the Entscheidungsproblem\"</em>, donde propuso un modelo teórico para definir qué es \"computable\". Este modelo es conocido como la <strong>Máquina de Turing</strong>.</p>\n",
        "    <ul>\n",
        "        <li><strong>¿Qué es la Máquina de Turing?</strong> Es una máquina teórica con una cinta infinita de celdas que pueden contener símbolos (por ejemplo, 0 y 1) y un cabezal que puede leer, escribir y mover la cinta en ambas direcciones.</li>\n",
        "        <li>La máquina sigue un conjunto de <strong>reglas de transición</strong> (un programa) que le indica cómo reaccionar en función del símbolo leído y su estado actual.</li>\n",
        "        <li>Aunque es simple, la Máquina de Turing es un modelo universal que puede simular cualquier algoritmo y, por tanto, cualquier cálculo realizable en una computadora.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>2. El Modelo Universal de Computación</h2>\n",
        "    <p>Una de las mayores revelaciones de Turing fue que cualquier problema resoluble de forma algorítmica también puede ser resuelto por una Máquina de Turing adecuada. Esto define los límites de lo que una máquina puede calcular, estableciendo un marco teórico para la computación universal.</p>\n",
        "    <p>La noción de una <strong>Máquina de Turing Universal</strong> –una máquina que puede emular a cualquier otra Máquina de Turing– es el precursor de la computadora moderna, pues plantea la idea de una máquina que puede programarse para realizar múltiples tareas.</p>\n",
        "\n",
        "    <h2>3. El Concepto de \"Decidibilidad\" y el Problema de Turing</h2>\n",
        "    <p>Turing también abordó el <strong>problema de la decidibilidad</strong>, que consiste en determinar si un problema tiene una solución algorítmica. Demostró que existen problemas para los que no hay una Máquina de Turing capaz de resolver en un tiempo finito, introduciendo el concepto de <strong>computación no decidible</strong>.</p>\n",
        "    <ul>\n",
        "        <li>Un ejemplo clásico es el <strong>Problema de la Parada</strong> (Halting Problem): determinar si un programa se detendrá o continuará ejecutándose indefinidamente es imposible de resolver de forma general.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>4. Impacto y Relevancia de la Máquina de Turing en la Computación Moderna</h2>\n",
        "    <p>La máquina de Turing estableció un lenguaje común para describir procesos computacionales y sentó las bases para el desarrollo de <strong>lenguajes de programación</strong> y <strong>arquitecturas de computadoras</strong>.</p>\n",
        "    <ul>\n",
        "        <li>La idea de que una máquina pueda \"programarse\" para realizar diferentes tareas es esencial para el concepto de computadoras de propósito general.</li>\n",
        "        <li>Todos los algoritmos que ejecutamos hoy pueden entenderse como secuencias de instrucciones que una Máquina de Turing podría ejecutar, independientemente de su complejidad.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>5. Legado de Turing y Su Influencia en la IA</h2>\n",
        "    <p>Turing no solo estableció la base de la computación teórica, sino que también fue pionero en el campo de la <strong>Inteligencia Artificial (IA)</strong>. Su idea de que una máquina puede \"pensar\" dio origen a la famosa <strong>Prueba de Turing</strong>, un test propuesto en 1950 para evaluar la inteligencia de una máquina mediante su capacidad de mantener una conversación indistinguible de la humana.</p>\n",
        "\n",
        "    <h2>6. Resumen de la Importancia del Concepto de Computación</h2>\n",
        "    <p>La Máquina de Turing sigue siendo un modelo esencial para entender la computación y delimitar las fronteras de lo que es posible y no posible resolver algorítmicamente.</p>\n",
        "    <p>Las computadoras actuales, desde las simples hasta las más avanzadas, se diseñan y evalúan en función de los principios que Turing desarrolló, y su trabajo continúa siendo fundamental en áreas como la criptografía, la teoría de la información, y la inteligencia artificial.</p>\n",
        "\n",
        "    <!-- Botón azul para acceder a Wikipedia sobre la Máquina de Turing -->\n",
        "    <a href=\"https://es.wikipedia.org/wiki/M%C3%A1quina_de_Turing\" target=\"_blank\" class=\"button\">Leer más</a>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "rT0u_Vk_MBYz",
        "outputId": "8e40d8b3-110a-42ab-87a7-6fdbfb10289c"
      },
      "id": "rT0u_Vk_MBYz",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Alan Turing y el Concepto de Computación</title>\n",
              "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: 'Roboto', Arial, sans-serif;\n",
              "            line-height: 1.8;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            color: #333;\n",
              "        }\n",
              "        h1, h2, h3 {\n",
              "            color: #2c3e50;\n",
              "        }\n",
              "        h1 {\n",
              "            font-size: 2.5em;\n",
              "            text-align: center;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            font-size: 2em;\n",
              "            margin-top: 40px;\n",
              "            color: #2980b9;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.2em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: square;\n",
              "            margin-left: 30px;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        .highlight {\n",
              "            background-color: #ffeb3b;\n",
              "            padding: 2px 5px;\n",
              "            border-radius: 3px;\n",
              "            font-weight: bold;\n",
              "        }\n",
              "        .button {\n",
              "            display: inline-block;\n",
              "            margin-top: 30px;\n",
              "            padding: 10px 20px;\n",
              "            font-size: 1.2em;\n",
              "            color: #fff;\n",
              "            background-color: #2980b9;\n",
              "            text-align: center;\n",
              "            border-radius: 5px;\n",
              "            text-decoration: none;\n",
              "        }\n",
              "        .button:hover {\n",
              "            background-color: #1f5d8c;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Alan Turing y el Concepto de Computación</h1>\n",
              "\n",
              "    <h2>1. La Máquina de Turing: Concepto Básico</h2>\n",
              "    <p>En 1936, Turing publicó un artículo titulado <em>\"On Computable Numbers, with an Application to the Entscheidungsproblem\"</em>, donde propuso un modelo teórico para definir qué es \"computable\". Este modelo es conocido como la <strong>Máquina de Turing</strong>.</p>\n",
              "    <ul>\n",
              "        <li><strong>¿Qué es la Máquina de Turing?</strong> Es una máquina teórica con una cinta infinita de celdas que pueden contener símbolos (por ejemplo, 0 y 1) y un cabezal que puede leer, escribir y mover la cinta en ambas direcciones.</li>\n",
              "        <li>La máquina sigue un conjunto de <strong>reglas de transición</strong> (un programa) que le indica cómo reaccionar en función del símbolo leído y su estado actual.</li>\n",
              "        <li>Aunque es simple, la Máquina de Turing es un modelo universal que puede simular cualquier algoritmo y, por tanto, cualquier cálculo realizable en una computadora.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>2. El Modelo Universal de Computación</h2>\n",
              "    <p>Una de las mayores revelaciones de Turing fue que cualquier problema resoluble de forma algorítmica también puede ser resuelto por una Máquina de Turing adecuada. Esto define los límites de lo que una máquina puede calcular, estableciendo un marco teórico para la computación universal.</p>\n",
              "    <p>La noción de una <strong>Máquina de Turing Universal</strong> –una máquina que puede emular a cualquier otra Máquina de Turing– es el precursor de la computadora moderna, pues plantea la idea de una máquina que puede programarse para realizar múltiples tareas.</p>\n",
              "\n",
              "    <h2>3. El Concepto de \"Decidibilidad\" y el Problema de Turing</h2>\n",
              "    <p>Turing también abordó el <strong>problema de la decidibilidad</strong>, que consiste en determinar si un problema tiene una solución algorítmica. Demostró que existen problemas para los que no hay una Máquina de Turing capaz de resolver en un tiempo finito, introduciendo el concepto de <strong>computación no decidible</strong>.</p>\n",
              "    <ul>\n",
              "        <li>Un ejemplo clásico es el <strong>Problema de la Parada</strong> (Halting Problem): determinar si un programa se detendrá o continuará ejecutándose indefinidamente es imposible de resolver de forma general.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>4. Impacto y Relevancia de la Máquina de Turing en la Computación Moderna</h2>\n",
              "    <p>La máquina de Turing estableció un lenguaje común para describir procesos computacionales y sentó las bases para el desarrollo de <strong>lenguajes de programación</strong> y <strong>arquitecturas de computadoras</strong>.</p>\n",
              "    <ul>\n",
              "        <li>La idea de que una máquina pueda \"programarse\" para realizar diferentes tareas es esencial para el concepto de computadoras de propósito general.</li>\n",
              "        <li>Todos los algoritmos que ejecutamos hoy pueden entenderse como secuencias de instrucciones que una Máquina de Turing podría ejecutar, independientemente de su complejidad.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>5. Legado de Turing y Su Influencia en la IA</h2>\n",
              "    <p>Turing no solo estableció la base de la computación teórica, sino que también fue pionero en el campo de la <strong>Inteligencia Artificial (IA)</strong>. Su idea de que una máquina puede \"pensar\" dio origen a la famosa <strong>Prueba de Turing</strong>, un test propuesto en 1950 para evaluar la inteligencia de una máquina mediante su capacidad de mantener una conversación indistinguible de la humana.</p>\n",
              "\n",
              "    <h2>6. Resumen de la Importancia del Concepto de Computación</h2>\n",
              "    <p>La Máquina de Turing sigue siendo un modelo esencial para entender la computación y delimitar las fronteras de lo que es posible y no posible resolver algorítmicamente.</p>\n",
              "    <p>Las computadoras actuales, desde las simples hasta las más avanzadas, se diseñan y evalúan en función de los principios que Turing desarrolló, y su trabajo continúa siendo fundamental en áreas como la criptografía, la teoría de la información, y la inteligencia artificial.</p>\n",
              "\n",
              "    <!-- Botón azul para acceder a Wikipedia sobre la Máquina de Turing -->\n",
              "    <a href=\"https://es.wikipedia.org/wiki/M%C3%A1quina_de_Turing\" target=\"_blank\" class=\"button\">Leer más</a>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "zSMIBxEPMAuj"
      },
      "id": "zSMIBxEPMAuj"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e577de05",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "e577de05",
        "outputId": "b32a58bc-7144-4ba3-8118-637a7a329e31"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Jerarquía de Modelos Computacionales</title>\n",
              "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: 'Roboto', Arial, sans-serif;\n",
              "            line-height: 1.8;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            color: #333;\n",
              "        }\n",
              "        h1 {\n",
              "            font-size: 2.5em;\n",
              "            text-align: center;\n",
              "            margin-bottom: 20px;\n",
              "            color: #2c3e50;\n",
              "        }\n",
              "        h2 {\n",
              "            font-size: 2em;\n",
              "            color: #2980b9;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.2em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 30px;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Jerarquía de Modelos Computacionales</h1>\n",
              "\n",
              "    <h2>Sistema Combinacional</h2>\n",
              "    <p>Es el modelo más básico en la jerarquía. Los sistemas combinacionales solo dependen de la entrada actual para determinar la salida. No tienen memoria ni estados, por lo que no pueden realizar cálculos secuenciales o recordar información previa.</p>\n",
              "    <ul>\n",
              "        <li><strong>Ejemplos:</strong> Puertas lógicas y circuitos combinacionales en hardware.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>Autómata Finito</h2>\n",
              "    <p>Los autómatas finitos pueden manejar cálculos secuenciales simples. Tienen un conjunto finito de estados y pueden cambiar entre estos estados en función de las entradas, pero no tienen una memoria extensa.</p>\n",
              "    <p>Son capaces de reconocer lenguajes regulares, como patrones que no requieren anidamiento ni jerarquía.</p>\n",
              "    <ul>\n",
              "        <li><strong>Ejemplo:</strong> Sistemas que necesitan verificar secuencias simples, como un sistema de reconocimiento de patrones en texto.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>Autómata con Pila</h2>\n",
              "    <p>Este modelo introduce una memoria limitada en forma de \"pila\", lo que le permite recordar ciertas informaciones de manera ordenada (LIFO: Last In, First Out).</p>\n",
              "    <p>Los autómatas con pila pueden reconocer lenguajes libres de contexto, como estructuras anidadas (ej., paréntesis balanceados), lo cual es un avance respecto a los autómatas finitos.</p>\n",
              "    <ul>\n",
              "        <li><strong>Ejemplo:</strong> Procesadores de expresiones matemáticas o lenguajes con estructura anidada.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>Máquina de Turing</h2>\n",
              "    <p>Es el modelo más poderoso en esta jerarquía, ya que tiene una \"memoria infinita\" en forma de una cinta que puede extenderse sin límite y permite almacenar y manipular información compleja.</p>\n",
              "    <p>La Máquina de Turing es capaz de realizar cualquier cálculo que sea algorítmicamente posible (computacionalmente decidible). Este modelo puede simular cualquier algoritmo y, por tanto, es la base teórica de las computadoras modernas.</p>\n",
              "    <ul>\n",
              "        <li><strong>Ejemplo:</strong> Cualquier programa o sistema que pueda ejecutar un algoritmo complejo, como los sistemas operativos o las aplicaciones avanzadas de software.</li>\n",
              "    </ul>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Jerarquía de Modelos Computacionales</title>\n",
        "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: 'Roboto', Arial, sans-serif;\n",
        "            line-height: 1.8;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            color: #333;\n",
        "        }\n",
        "        h1 {\n",
        "            font-size: 2.5em;\n",
        "            text-align: center;\n",
        "            margin-bottom: 20px;\n",
        "            color: #2c3e50;\n",
        "        }\n",
        "        h2 {\n",
        "            font-size: 2em;\n",
        "            color: #2980b9;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.2em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 30px;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Jerarquía de Modelos Computacionales</h1>\n",
        "\n",
        "    <h2>Sistema Combinacional</h2>\n",
        "    <p>Es el modelo más básico en la jerarquía. Los sistemas combinacionales solo dependen de la entrada actual para determinar la salida. No tienen memoria ni estados, por lo que no pueden realizar cálculos secuenciales o recordar información previa.</p>\n",
        "    <ul>\n",
        "        <li><strong>Ejemplos:</strong> Puertas lógicas y circuitos combinacionales en hardware.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>Autómata Finito</h2>\n",
        "    <p>Los autómatas finitos pueden manejar cálculos secuenciales simples. Tienen un conjunto finito de estados y pueden cambiar entre estos estados en función de las entradas, pero no tienen una memoria extensa.</p>\n",
        "    <p>Son capaces de reconocer lenguajes regulares, como patrones que no requieren anidamiento ni jerarquía.</p>\n",
        "    <ul>\n",
        "        <li><strong>Ejemplo:</strong> Sistemas que necesitan verificar secuencias simples, como un sistema de reconocimiento de patrones en texto.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>Autómata con Pila</h2>\n",
        "    <p>Este modelo introduce una memoria limitada en forma de \"pila\", lo que le permite recordar ciertas informaciones de manera ordenada (LIFO: Last In, First Out).</p>\n",
        "    <p>Los autómatas con pila pueden reconocer lenguajes libres de contexto, como estructuras anidadas (ej., paréntesis balanceados), lo cual es un avance respecto a los autómatas finitos.</p>\n",
        "    <ul>\n",
        "        <li><strong>Ejemplo:</strong> Procesadores de expresiones matemáticas o lenguajes con estructura anidada.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>Máquina de Turing</h2>\n",
        "    <p>Es el modelo más poderoso en esta jerarquía, ya que tiene una \"memoria infinita\" en forma de una cinta que puede extenderse sin límite y permite almacenar y manipular información compleja.</p>\n",
        "    <p>La Máquina de Turing es capaz de realizar cualquier cálculo que sea algorítmicamente posible (computacionalmente decidible). Este modelo puede simular cualquier algoritmo y, por tanto, es la base teórica de las computadoras modernas.</p>\n",
        "    <ul>\n",
        "        <li><strong>Ejemplo:</strong> Cualquier programa o sistema que pueda ejecutar un algoritmo complejo, como los sistemas operativos o las aplicaciones avanzadas de software.</li>\n",
        "    </ul>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Colab\n",
        "display(HTML(html_content))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Los sistemas combinacionales en electrónica digital son circuitos cuya salida depende únicamente de las entradas actuales. A continuación, te doy ejemplos en código de algunos circuitos combinacionales básicos, comunes en teoría y práctica: AND, OR, NOT, XOR"
      ],
      "metadata": {
        "id": "mBLa71j1M58G"
      },
      "id": "mBLa71j1M58G"
    },
    {
      "cell_type": "code",
      "source": [
        "def and_gate(a, b):\n",
        "    return a and b\n",
        "\n",
        "# Ejemplo de uso:\n",
        "print(\"AND Gate\")\n",
        "print(\"0 AND 0 =\", and_gate(0, 0))  # Output: 0\n",
        "print(\"0 AND 1 =\", and_gate(0, 1))  # Output: 0\n",
        "print(\"1 AND 0 =\", and_gate(1, 0))  # Output: 0\n",
        "print(\"1 AND 1 =\", and_gate(1, 1))  # Output: 1\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8yREFV2TMrbe",
        "outputId": "4a91377c-3db9-4ea4-faf5-87c1f9613570"
      },
      "id": "8yREFV2TMrbe",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AND Gate\n",
            "0 AND 0 = 0\n",
            "0 AND 1 = 0\n",
            "1 AND 0 = 0\n",
            "1 AND 1 = 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "538CPeRjOAhr"
      },
      "id": "538CPeRjOAhr",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Autómata Finito\n",
        "Los autómatas finitos pueden manejar cálculos secuenciales y tienen un conjunto finito de estados. A continuación se ejemplifica con un autómata que verifica si una cadena contiene un número par de as."
      ],
      "metadata": {
        "id": "snLSq5M_Nu5X"
      },
      "id": "snLSq5M_Nu5X"
    },
    {
      "cell_type": "code",
      "source": [
        "def finite_automaton(input_string):\n",
        "    state = 0  # Estado inicial\n",
        "    for char in input_string:\n",
        "        if char == 'a':\n",
        "            state = 1 - state  # Alterna entre estados 0 y 1\n",
        "    return state == 0  # Acepta si termina en estado 0\n",
        "\n",
        "# Ejemplo de uso\n",
        "print(\"\\nAutómata Finito - Número Par de 'a's\")\n",
        "print(\"Cadena 'aa' aceptada:\", finite_automaton(\"aa\"))\n",
        "print(\"Cadena 'aaa' aceptada:\", finite_automaton(\"aaa\"))\n",
        "print(\"Cadena 'aaaa' aceptada:\", finite_automaton(\"aaaa\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fO_y--_nNdfO",
        "outputId": "b0005aa0-93ff-4d9d-d44b-da1530b8cb7f"
      },
      "id": "fO_y--_nNdfO",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Autómata Finito - Número Par de 'a's\n",
            "Cadena 'aa' aceptada: True\n",
            "Cadena 'aaa' aceptada: False\n",
            "Cadena 'aaaa' aceptada: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Autómata con Pila\n",
        "Un autómata con pila puede reconocer estructuras anidadas. Aquí se ejemplifica con un autómata que verifica si los paréntesis están balanceados en una expresión.\n"
      ],
      "metadata": {
        "id": "DWdYUvoEOY-R"
      },
      "id": "DWdYUvoEOY-R"
    },
    {
      "cell_type": "code",
      "source": [
        "def pushdown_automaton(expression):\n",
        "    stack = []\n",
        "    for char in expression:\n",
        "        if char == '(':\n",
        "            stack.append(char)\n",
        "        elif char == ')':\n",
        "            if not stack:\n",
        "                return False  # Si la pila está vacía, no está balanceado\n",
        "            stack.pop()\n",
        "    return len(stack) == 0  # Acepta si la pila está vacía al final\n",
        "\n",
        "# Ejemplo de uso\n",
        "print(\"\\nAutómata con Pila - Paréntesis Balanceados\")\n",
        "print(\"Expresión '(())' balanceada:\", pushdown_automaton(\"(())\"))\n",
        "print(\"Expresión '(()' balanceada:\", pushdown_automaton(\"(()\"))\n",
        "print(\"Expresión '())(' balanceada:\", pushdown_automaton(\"())(\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O6XfqaE6OCuG",
        "outputId": "8ba0f73f-6d4d-4de2-f713-2ac51fc1306a"
      },
      "id": "O6XfqaE6OCuG",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Autómata con Pila - Paréntesis Balanceados\n",
            "Expresión '(())' balanceada: True\n",
            "Expresión '(()' balanceada: False\n",
            "Expresión '())(' balanceada: False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Máquina de Turing\n",
        "La Máquina de Turing es el modelo más avanzado y tiene memoria infinita. A continuación se muestra una versión simple de una máquina de Turing que verifica si una cadena de 1s tiene una longitud par."
      ],
      "metadata": {
        "id": "J4PNoIgkOx8E"
      },
      "id": "J4PNoIgkOx8E"
    },
    {
      "cell_type": "code",
      "source": [
        "def turing_machine(input_string):\n",
        "    tape = list(input_string)  # Convierte la cadena en una cinta de caracteres\n",
        "    head = 0  # Posición inicial de la cabeza de lectura/escritura\n",
        "    state = 'q0'  # Estado inicial\n",
        "\n",
        "    while head < len(tape):\n",
        "        if state == 'q0':\n",
        "            if tape[head] == '1':\n",
        "                state = 'q1'\n",
        "            head += 1\n",
        "        elif state == 'q1':\n",
        "            if tape[head] == '1':\n",
        "                state = 'q0'\n",
        "            head += 1\n",
        "\n",
        "    return state == 'q0'  # Acepta si termina en el estado q0\n",
        "\n",
        "# Ejemplo de uso\n",
        "print(\"\\nMáquina de Turing - Longitud Par de '1's\")\n",
        "print(\"Cadena '11' tiene longitud par:\", turing_machine(\"11\"))\n",
        "print(\"Cadena '111' tiene longitud par:\", turing_machine(\"111\"))\n",
        "print(\"Cadena '1111' tiene longitud par:\", turing_machine(\"1111\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tee13EEJOtRd",
        "outputId": "64ffec74-a100-46e0-8baf-75e45e78ddd4"
      },
      "id": "Tee13EEJOtRd",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Máquina de Turing - Longitud Par de '1's\n",
            "Cadena '11' tiene longitud par: True\n",
            "Cadena '111' tiene longitud par: False\n",
            "Cadena '1111' tiene longitud par: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e5757cf1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "e5757cf1",
        "outputId": "4440e9d8-94b3-4db1-98c6-4b4db40e9adb"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>El Perceptrón de Frank Rosenblatt</title>\n",
              "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: 'Roboto', Arial, sans-serif;\n",
              "            line-height: 1.8;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            color: #333;\n",
              "        }\n",
              "        h1 {\n",
              "            font-size: 2.5em;\n",
              "            text-align: center;\n",
              "            margin-bottom: 20px;\n",
              "            color: #2c3e50;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.2em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        .highlight {\n",
              "            background-color: #ffeb3b;\n",
              "            padding: 2px 5px;\n",
              "            border-radius: 3px;\n",
              "            font-weight: bold;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>El Perceptrón de Frank Rosenblatt</h1>\n",
              "\n",
              "    <p>En 1958, <strong>Frank Rosenblatt</strong> diseñó el <span class=\"highlight\">Perceptrón</span>, la primera red neuronal artificial basada en el modelo de neuronas propuesto por McCulloch y Pitts en 1943.</p>\n",
              "    <p>El Perceptrón fue una de las primeras implementaciones prácticas de una red neuronal y marcó un hito en el desarrollo de la inteligencia artificial. Inspirado en el funcionamiento de las neuronas biológicas, Rosenblatt propuso un modelo de neurona capaz de aprender a partir de datos, realizando ajustes en sus pesos para mejorar su precisión en tareas de clasificación.</p>\n",
              "    <p>Este modelo inicial de red neuronal sentó las bases para lo que hoy conocemos como aprendizaje supervisado y redes neuronales profundas, y su creación fue un paso fundamental hacia el desarrollo de técnicas avanzadas en el campo del <strong>aprendizaje automático</strong> (Machine Learning) y la <strong>inteligencia artificial</strong>.</p>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>El Perceptrón de Frank Rosenblatt</title>\n",
        "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: 'Roboto', Arial, sans-serif;\n",
        "            line-height: 1.8;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            color: #333;\n",
        "        }\n",
        "        h1 {\n",
        "            font-size: 2.5em;\n",
        "            text-align: center;\n",
        "            margin-bottom: 20px;\n",
        "            color: #2c3e50;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.2em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        .highlight {\n",
        "            background-color: #ffeb3b;\n",
        "            padding: 2px 5px;\n",
        "            border-radius: 3px;\n",
        "            font-weight: bold;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>El Perceptrón de Frank Rosenblatt</h1>\n",
        "\n",
        "    <p>En 1958, <strong>Frank Rosenblatt</strong> diseñó el <span class=\"highlight\">Perceptrón</span>, la primera red neuronal artificial basada en el modelo de neuronas propuesto por McCulloch y Pitts en 1943.</p>\n",
        "    <p>El Perceptrón fue una de las primeras implementaciones prácticas de una red neuronal y marcó un hito en el desarrollo de la inteligencia artificial. Inspirado en el funcionamiento de las neuronas biológicas, Rosenblatt propuso un modelo de neurona capaz de aprender a partir de datos, realizando ajustes en sus pesos para mejorar su precisión en tareas de clasificación.</p>\n",
        "    <p>Este modelo inicial de red neuronal sentó las bases para lo que hoy conocemos como aprendizaje supervisado y redes neuronales profundas, y su creación fue un paso fundamental hacia el desarrollo de técnicas avanzadas en el campo del <strong>aprendizaje automático</strong> (Machine Learning) y la <strong>inteligencia artificial</strong>.</p>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Colab\n",
        "display(HTML(html_content))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f012cd3b",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 843
        },
        "id": "f012cd3b",
        "outputId": "9ab749f6-a421-4540-e389-e8129a36b8a0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.54.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (10.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n",
            "Precisión en el conjunto de prueba: 1.00\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Instalar librerías necesarias\n",
        "!pip install matplotlib scikit-learn\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import Perceptron\n",
        "from sklearn.datasets import make_blobs\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Generar un conjunto de datos sintético para clasificación binaria\n",
        "X, y = make_blobs(n_samples=100, centers=2, random_state=42, cluster_std=1.5)\n",
        "\n",
        "# Dividir el conjunto de datos en entrenamiento y prueba\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Crear el modelo de Perceptrón\n",
        "perceptron = Perceptron(max_iter=1000, tol=1e-3, random_state=42)\n",
        "\n",
        "# Entrenar el Perceptrón\n",
        "perceptron.fit(X_train, y_train)\n",
        "\n",
        "# Predecir en el conjunto de prueba\n",
        "y_pred = perceptron.predict(X_test)\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Precisión en el conjunto de prueba: {accuracy:.2f}\")\n",
        "\n",
        "# Visualización de la frontera de decisión\n",
        "# Crear una malla de puntos para la gráfica\n",
        "x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
        "y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n",
        "\n",
        "# Predecir usando el perceptrón en cada punto de la malla\n",
        "Z = perceptron.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "Z = Z.reshape(xx.shape)\n",
        "\n",
        "# Configurar el gráfico\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.Paired)\n",
        "plt.scatter(X_train[:, 0], X_train[:, 1], c=y_train, marker='o', edgecolor='k', label=\"Datos de Entrenamiento\")\n",
        "plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test, marker='s', edgecolor='k', label=\"Datos de Prueba\")\n",
        "\n",
        "# Etiquetas y leyenda\n",
        "plt.title(\"Clasificación con Perceptrón\")\n",
        "plt.xlabel(\"Característica 1\")\n",
        "plt.ylabel(\"Característica 2\")\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ac3680ef",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 970
        },
        "id": "ac3680ef",
        "outputId": "b4bf089c-888a-4d09-8e2f-6c2e31107be1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Avances en Inteligencia Artificial (1960-1980)</title>\n",
              "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: 'Roboto', Arial, sans-serif;\n",
              "            line-height: 1.8;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            color: #333;\n",
              "        }\n",
              "        h1 {\n",
              "            font-size: 2.5em;\n",
              "            text-align: center;\n",
              "            margin-bottom: 20px;\n",
              "            color: #2c3e50;\n",
              "        }\n",
              "        h2 {\n",
              "            font-size: 2em;\n",
              "            color: #2980b9;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.2em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 30px;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Avances en Inteligencia Artificial (1960-1980)</h1>\n",
              "\n",
              "    <h2>Sistemas Expertos (Mediados de los años 60)</h2>\n",
              "    <p>Los <strong>sistemas expertos</strong> fueron uno de los primeros avances importantes en inteligencia artificial aplicada. Diseñados para emular la toma de decisiones de un experto humano, estos sistemas funcionan con una <strong>base de conocimientos</strong> que contiene hechos y reglas para hacer predicciones o recomendaciones.</p>\n",
              "    <p>Son capaces de predecir probabilidades o recomendar soluciones basándose en un conjunto de condiciones predefinidas, y son útiles en aplicaciones como el diagnóstico médico, donde pueden sugerir diagnósticos probables según los síntomas del paciente.</p>\n",
              "\n",
              "    <h2>Algoritmo de Vecinos Más Cercanos (1967)</h2>\n",
              "    <p>En 1967, surge el algoritmo de <strong>Vecinos Más Cercanos</strong> (k-Nearest Neighbors o k-NN), que permite a las computadoras reconocer patrones al comparar un punto nuevo con los puntos de entrenamiento más cercanos, o \"vecinos\". Este algoritmo clasifica los datos en función de la mayoría de sus vecinos más cercanos.</p>\n",
              "    <p>Aunque es sencillo, el algoritmo de Vecinos Más Cercanos fue innovador y se utilizó en aplicaciones comerciales debido a su simplicidad y eficiencia en tareas de clasificación básica.</p>\n",
              "\n",
              "    <h2>Algoritmos Genéticos (Década de 1970)</h2>\n",
              "    <p>Introducidos por <strong>John Henry Holland</strong>, los <strong>algoritmos genéticos</strong> se inspiran en la biología evolutiva y la selección natural. Estos algoritmos utilizan operadores biológicos simulados, como la <strong>mutación</strong>, el <strong>cruce</strong> y la <strong>selección</strong>, para encontrar soluciones óptimas o casi óptimas en problemas complejos.</p>\n",
              "    <p>Son especialmente útiles en problemas de optimización, ya que buscan la mejor solución de manera iterativa y se adaptan al entorno del problema.</p>\n",
              "\n",
              "    <h2>Aprendizaje Basado en Explicación (1981)</h2>\n",
              "    <p>En 1981, <strong>Gerald Dejong</strong> introduce el concepto de <strong>Aprendizaje Basado en Explicación</strong> (Explanation-Based Learning o EBL). Este enfoque permite a la computadora generalizar a partir de datos de entrenamiento, aprendiendo reglas generales que le permiten ignorar datos irrelevantes o redundantes.</p>\n",
              "    <p>El EBL es útil en aplicaciones donde es crucial optimizar el aprendizaje y reducir el procesamiento de datos innecesarios, mejorando así la eficiencia de los modelos de aprendizaje.</p>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Avances en Inteligencia Artificial (1960-1980)</title>\n",
        "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: 'Roboto', Arial, sans-serif;\n",
        "            line-height: 1.8;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            color: #333;\n",
        "        }\n",
        "        h1 {\n",
        "            font-size: 2.5em;\n",
        "            text-align: center;\n",
        "            margin-bottom: 20px;\n",
        "            color: #2c3e50;\n",
        "        }\n",
        "        h2 {\n",
        "            font-size: 2em;\n",
        "            color: #2980b9;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.2em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 30px;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Avances en Inteligencia Artificial (1960-1980)</h1>\n",
        "\n",
        "    <h2>Sistemas Expertos (Mediados de los años 60)</h2>\n",
        "    <p>Los <strong>sistemas expertos</strong> fueron uno de los primeros avances importantes en inteligencia artificial aplicada. Diseñados para emular la toma de decisiones de un experto humano, estos sistemas funcionan con una <strong>base de conocimientos</strong> que contiene hechos y reglas para hacer predicciones o recomendaciones.</p>\n",
        "    <p>Son capaces de predecir probabilidades o recomendar soluciones basándose en un conjunto de condiciones predefinidas, y son útiles en aplicaciones como el diagnóstico médico, donde pueden sugerir diagnósticos probables según los síntomas del paciente.</p>\n",
        "\n",
        "    <h2>Algoritmo de Vecinos Más Cercanos (1967)</h2>\n",
        "    <p>En 1967, surge el algoritmo de <strong>Vecinos Más Cercanos</strong> (k-Nearest Neighbors o k-NN), que permite a las computadoras reconocer patrones al comparar un punto nuevo con los puntos de entrenamiento más cercanos, o \"vecinos\". Este algoritmo clasifica los datos en función de la mayoría de sus vecinos más cercanos.</p>\n",
        "    <p>Aunque es sencillo, el algoritmo de Vecinos Más Cercanos fue innovador y se utilizó en aplicaciones comerciales debido a su simplicidad y eficiencia en tareas de clasificación básica.</p>\n",
        "\n",
        "    <h2>Algoritmos Genéticos (Década de 1970)</h2>\n",
        "    <p>Introducidos por <strong>John Henry Holland</strong>, los <strong>algoritmos genéticos</strong> se inspiran en la biología evolutiva y la selección natural. Estos algoritmos utilizan operadores biológicos simulados, como la <strong>mutación</strong>, el <strong>cruce</strong> y la <strong>selección</strong>, para encontrar soluciones óptimas o casi óptimas en problemas complejos.</p>\n",
        "    <p>Son especialmente útiles en problemas de optimización, ya que buscan la mejor solución de manera iterativa y se adaptan al entorno del problema.</p>\n",
        "\n",
        "    <h2>Aprendizaje Basado en Explicación (1981)</h2>\n",
        "    <p>En 1981, <strong>Gerald Dejong</strong> introduce el concepto de <strong>Aprendizaje Basado en Explicación</strong> (Explanation-Based Learning o EBL). Este enfoque permite a la computadora generalizar a partir de datos de entrenamiento, aprendiendo reglas generales que le permiten ignorar datos irrelevantes o redundantes.</p>\n",
        "    <p>El EBL es útil en aplicaciones donde es crucial optimizar el aprendizaje y reducir el procesamiento de datos innecesarios, mejorando así la eficiencia de los modelos de aprendizaje.</p>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Colab\n",
        "display(HTML(html_content))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bfa3bf2e",
      "metadata": {
        "id": "bfa3bf2e"
      },
      "source": [
        "1. Sistemas Expertos (Ejemplo Simple)\n",
        "Un sistema experto puede implementarse con reglas básicas usando una estructura if-else. Para fines de ejemplo, simulemos un sistema de diagnóstico médico simple."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3650012e",
      "metadata": {
        "id": "3650012e",
        "outputId": "6ba92a63-5381-414c-f912-9af53e450c50"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Posible diagnóstico: Resfriado común\n"
          ]
        }
      ],
      "source": [
        "# Sistema Experto Simple: Diagnóstico de Resfriado Común\n",
        "def sistema_experto_sintomas(fiebre, tos, dolor_garganta):\n",
        "    if fiebre and tos and dolor_garganta:\n",
        "        return \"Posible diagnóstico: Resfriado común\"\n",
        "    elif fiebre and tos:\n",
        "        return \"Posible diagnóstico: Gripe\"\n",
        "    elif dolor_garganta and not fiebre:\n",
        "        return \"Posible diagnóstico: Infección leve\"\n",
        "    else:\n",
        "        return \"Síntomas no concluyentes, consulte a un médico.\"\n",
        "\n",
        "# Ejemplo de uso\n",
        "print(sistema_experto_sintomas(fiebre=True, tos=True, dolor_garganta=True))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e8414d37",
      "metadata": {
        "id": "e8414d37"
      },
      "source": [
        "Este código simula un sistema experto que sugiere diagnósticos según los síntomas. Aunque es un ejemplo simplificado, permite entender cómo funcionan las reglas en un sistema experto básico.\n",
        "\n",
        "2. Algoritmo de Vecinos Más Cercanos (k-NN)\n",
        "Este ejemplo utiliza el algoritmo k-NN para clasificar puntos en un espacio bidimensional y visualiza la frontera de decisión. Usa sklearn para entrenar el modelo y matplotlib para graficar."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7144794a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "id": "7144794a",
        "outputId": "0d0d69ad-61b6-4a30-f2d0-9a1f1a3dca2f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.7.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.54.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.26.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (10.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Instalar las bibliotecas necesarias\n",
        "!pip install matplotlib scikit-learn\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.datasets import make_blobs\n",
        "\n",
        "# Generar datos sintéticos para clasificación\n",
        "X, y = make_blobs(n_samples=100, centers=2, random_state=42, cluster_std=1.5)\n",
        "\n",
        "# Crear y entrenar el modelo k-NN\n",
        "knn = KNeighborsClassifier(n_neighbors=3)\n",
        "knn.fit(X, y)\n",
        "\n",
        "# Visualización de la frontera de decisión\n",
        "x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
        "y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))\n",
        "Z = knn.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "Z = Z.reshape(xx.shape)\n",
        "\n",
        "# Gráfica\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.contourf(xx, yy, Z, alpha=0.3, cmap=plt.cm.Paired)\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y, edgecolor='k', marker='o')\n",
        "plt.title(\"Clasificación con k-Nearest Neighbors (k-NN)\")\n",
        "plt.xlabel(\"Característica 1\")\n",
        "plt.ylabel(\"Característica 2\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "03af2f3f",
      "metadata": {
        "id": "03af2f3f"
      },
      "source": [
        "3. Algoritmos Genéticos (Optimización Simple)\n",
        "Usaremos la biblioteca deap para implementar un algoritmo genético que busque el máximo de una función cuadrática simple. Este ejemplo permite entender cómo los algoritmos genéticos encuentran soluciones óptimas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9522461d",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9522461d",
        "outputId": "cbc35d46-e1ee-4f88-a768-b76633b24e4f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting deap\n",
            "  Downloading deap-1.4.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (13 kB)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from deap) (1.26.4)\n",
            "Downloading deap-1.4.1-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (135 kB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/135.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m135.4/135.4 kB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: deap\n",
            "Successfully installed deap-1.4.1\n",
            "Mejor solución encontrada: x = -11.965110608705398, f(x) = 143.16387187855446\n"
          ]
        }
      ],
      "source": [
        "# Instalar la biblioteca DEAP\n",
        "!pip install deap\n",
        "\n",
        "import random\n",
        "from deap import base, creator, tools, algorithms\n",
        "\n",
        "# Definir la función objetivo (maximizar x^2)\n",
        "def func_objetivo(individual):\n",
        "    x = individual[0]\n",
        "    return x**2,  # Retorna una tupla\n",
        "\n",
        "# Configurar el entorno del algoritmo genético\n",
        "creator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\n",
        "creator.create(\"Individual\", list, fitness=creator.FitnessMax)\n",
        "\n",
        "toolbox = base.Toolbox()\n",
        "toolbox.register(\"attr_float\", random.uniform, -10, 10)\n",
        "toolbox.register(\"individual\", tools.initRepeat, creator.Individual, toolbox.attr_float, 1)\n",
        "toolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n",
        "\n",
        "toolbox.register(\"evaluate\", func_objetivo)\n",
        "toolbox.register(\"mate\", tools.cxBlend, alpha=0.5)\n",
        "toolbox.register(\"mutate\", tools.mutGaussian, mu=0, sigma=1, indpb=0.2)\n",
        "toolbox.register(\"select\", tools.selTournament, tournsize=3)\n",
        "\n",
        "# Ejecutar el algoritmo genético\n",
        "population = toolbox.population(n=10)\n",
        "result, _ = algorithms.eaSimple(population, toolbox, cxpb=0.5, mutpb=0.2, ngen=30, verbose=False)\n",
        "\n",
        "# Visualización de la mejor solución encontrada\n",
        "best_individual = tools.selBest(population, 1)[0]\n",
        "print(f\"Mejor solución encontrada: x = {best_individual[0]}, f(x) = {best_individual.fitness.values[0]}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "feab9c03",
      "metadata": {
        "id": "feab9c03"
      },
      "source": [
        "En este ejemplo, el algoritmo genético busca el valor máximo de la función\n",
        "𝑥\n",
        "2\n",
        "x\n",
        "2\n",
        "  en el rango de -10 a 10. La función objetivo y los operadores de selección, cruce y mutación están configurados para maximizar la función.\n",
        "\n",
        "4. Aprendizaje Basado en Explicación (Filtrado de Datos)\n",
        "Simularemos el concepto de Aprendizaje Basado en Explicación (EBL) implementando un filtro que ignora datos irrelevantes. Este ejemplo aplica una regla general sobre un conjunto de datos y muestra solo los elementos importantes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d116d384",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d116d384",
        "outputId": "823f7d2a-3f7d-48d0-bafc-c94f65d9a96a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Datos relevantes según el filtro:\n",
            "   Nombre  Edad  Ocupación  Salario\n",
            "1     Ana    45  Ingeniero     5000\n",
            "2    Luis    35   Profesor     4000\n",
            "4  Carlos    30     Médico     7000\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Crear un conjunto de datos de ejemplo\n",
        "data = {\n",
        "    'Nombre': ['Juan', 'Ana', 'Luis', 'Maria', 'Carlos'],\n",
        "    'Edad': [25, 45, 35, 22, 30],\n",
        "    'Ocupación': ['Estudiante', 'Ingeniero', 'Profesor', 'Estudiante', 'Médico'],\n",
        "    'Salario': [1500, 5000, 4000, 1200, 7000]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# Definir una regla general: Solo seleccionar personas con salario mayor a 3000\n",
        "def filtro_ebl(df):\n",
        "    return df[df['Salario'] > 3000]\n",
        "\n",
        "# Aplicar el filtro y mostrar solo los datos relevantes\n",
        "df_relevante = filtro_ebl(df)\n",
        "print(\"Datos relevantes según el filtro:\")\n",
        "print(df_relevante)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "51d16f7c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "51d16f7c",
        "outputId": "e226f10d-6092-47b7-d046-d7aa7267e83d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>DeepMind y AlphaGo</title>\n",
              "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: 'Roboto', Arial, sans-serif;\n",
              "            line-height: 1.8;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            color: #333;\n",
              "        }\n",
              "        h1 {\n",
              "            font-size: 2.5em;\n",
              "            text-align: center;\n",
              "            margin-bottom: 20px;\n",
              "            color: #2c3e50;\n",
              "        }\n",
              "        h2 {\n",
              "            font-size: 2em;\n",
              "            color: #2980b9;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.2em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 30px;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        strong {\n",
              "            color: #2c3e50;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>DeepMind y AlphaGo</h1>\n",
              "\n",
              "    <h2>Introducción a DeepMind</h2>\n",
              "    <p><strong>DeepMind</strong> es una empresa británica de inteligencia artificial (IA) fundada en 2010 y adquirida por Google en 2015. Su misión es crear una inteligencia artificial general (AGI) que pueda aprender a realizar tareas de manera autónoma. DeepMind es conocida por sus innovaciones en aprendizaje profundo y aprendizaje por refuerzo, y uno de sus proyectos más famosos es <strong>AlphaGo</strong>.</p>\n",
              "\n",
              "    <h2>AlphaGo: Qué Es y Su Significado</h2>\n",
              "    <p><strong>AlphaGo</strong> es una IA desarrollada por DeepMind para jugar el juego de Go, un juego de mesa chino famoso por su inmensa complejidad. A diferencia del ajedrez, el Go tiene una cantidad de movimientos posibles tan grande que no se puede abordar con métodos de búsqueda exhaustiva.</p>\n",
              "    <p>Antes de AlphaGo, los mejores programas de Go no podían vencer a jugadores profesionales, y se pensaba que pasaría al menos una década antes de que una IA pudiera competir con los mejores jugadores humanos en este juego.</p>\n",
              "\n",
              "    <h2>Cómo Funciona AlphaGo: Arquitectura y Tecnología</h2>\n",
              "    <ul>\n",
              "        <li><strong>Redes Neuronales Profundas:</strong> AlphaGo usa una <strong>red de política</strong> que predice los movimientos más prometedores y una <strong>red de valor</strong> que estima la probabilidad de ganar desde una posición específica en el tablero.</li>\n",
              "        <li><strong>Aprendizaje por Refuerzo:</strong> AlphaGo fue entrenado inicialmente con partidas de jugadores humanos y luego mejoró jugando contra versiones anteriores de sí mismo.</li>\n",
              "        <li><strong>Búsqueda de Árboles de Monte Carlo (MCTS):</strong> Permite explorar posibles movimientos y resultados sin analizar cada jugada en profundidad, lo que acelera la toma de decisiones.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>El Hito de AlphaGo contra Lee Sedol (2016)</h2>\n",
              "    <p>El momento clave para AlphaGo ocurrió en 2016, cuando se enfrentó al jugador profesional surcoreano <strong>Lee Sedol</strong>. En una serie de cinco partidas, AlphaGo venció a Lee Sedol 4-1, lo cual fue un momento histórico en el campo de la IA.</p>\n",
              "    <p>La partida 4 fue especialmente famosa porque Lee Sedol logró vencer a AlphaGo con una jugada sorprendente. Sin embargo, AlphaGo ganó el resto de las partidas, demostrando que las máquinas podían dominar un juego tan complejo.</p>\n",
              "\n",
              "    <h2>Avances Posteriores: AlphaGo Zero y AlphaZero</h2>\n",
              "    <ul>\n",
              "        <li><strong>AlphaGo Zero:</strong> A diferencia de AlphaGo, AlphaGo Zero fue entrenado desde cero sin datos humanos, solo conociendo las reglas del Go. Aprendió completamente por sí mismo y alcanzó un nivel superior en solo tres días.</li>\n",
              "        <li><strong>AlphaZero:</strong> AlphaZero es una versión generalizada de AlphaGo Zero, capaz de jugar múltiples juegos de estrategia (como ajedrez, shogi y Go) solo conociendo las reglas de cada juego. Superó a los mejores programas de IA en todos estos juegos.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>Impacto y Significado de AlphaGo</h2>\n",
              "    <p>La victoria de AlphaGo marcó un cambio de paradigma en inteligencia artificial, mostrando que las técnicas de <strong>aprendizaje profundo</strong> y <strong>aprendizaje por refuerzo</strong> pueden resolver problemas extremadamente complejos. Esto ha inspirado aplicaciones en diversas áreas:</p>\n",
              "    <ul>\n",
              "        <li><strong>Medicina:</strong> Diagnósticos y tratamientos personalizados.</li>\n",
              "        <li><strong>Ciencia de Materiales:</strong> Descubrimiento de nuevos materiales.</li>\n",
              "        <li><strong>Optimización de Sistemas:</strong> Energía, telecomunicaciones y logística.</li>\n",
              "        <li><strong>Investigación de IA:</strong> Desarrollo de nuevas arquitecturas y algoritmos.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2>Conclusión</h2>\n",
              "    <p><strong>AlphaGo</strong> es un ejemplo emblemático del poder de la IA moderna. Al demostrar que una IA puede aprender a jugar un juego tan complejo como el Go y derrotar a los mejores jugadores del mundo, DeepMind y AlphaGo lograron un avance técnico que abrió la puerta para que la IA enfrente desafíos en problemas complejos en el mundo real.</p>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>DeepMind y AlphaGo</title>\n",
        "    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\">\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: 'Roboto', Arial, sans-serif;\n",
        "            line-height: 1.8;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            color: #333;\n",
        "        }\n",
        "        h1 {\n",
        "            font-size: 2.5em;\n",
        "            text-align: center;\n",
        "            margin-bottom: 20px;\n",
        "            color: #2c3e50;\n",
        "        }\n",
        "        h2 {\n",
        "            font-size: 2em;\n",
        "            color: #2980b9;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.2em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 30px;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        strong {\n",
        "            color: #2c3e50;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>DeepMind y AlphaGo</h1>\n",
        "\n",
        "    <h2>Introducción a DeepMind</h2>\n",
        "    <p><strong>DeepMind</strong> es una empresa británica de inteligencia artificial (IA) fundada en 2010 y adquirida por Google en 2015. Su misión es crear una inteligencia artificial general (AGI) que pueda aprender a realizar tareas de manera autónoma. DeepMind es conocida por sus innovaciones en aprendizaje profundo y aprendizaje por refuerzo, y uno de sus proyectos más famosos es <strong>AlphaGo</strong>.</p>\n",
        "\n",
        "    <h2>AlphaGo: Qué Es y Su Significado</h2>\n",
        "    <p><strong>AlphaGo</strong> es una IA desarrollada por DeepMind para jugar el juego de Go, un juego de mesa chino famoso por su inmensa complejidad. A diferencia del ajedrez, el Go tiene una cantidad de movimientos posibles tan grande que no se puede abordar con métodos de búsqueda exhaustiva.</p>\n",
        "    <p>Antes de AlphaGo, los mejores programas de Go no podían vencer a jugadores profesionales, y se pensaba que pasaría al menos una década antes de que una IA pudiera competir con los mejores jugadores humanos en este juego.</p>\n",
        "\n",
        "    <h2>Cómo Funciona AlphaGo: Arquitectura y Tecnología</h2>\n",
        "    <ul>\n",
        "        <li><strong>Redes Neuronales Profundas:</strong> AlphaGo usa una <strong>red de política</strong> que predice los movimientos más prometedores y una <strong>red de valor</strong> que estima la probabilidad de ganar desde una posición específica en el tablero.</li>\n",
        "        <li><strong>Aprendizaje por Refuerzo:</strong> AlphaGo fue entrenado inicialmente con partidas de jugadores humanos y luego mejoró jugando contra versiones anteriores de sí mismo.</li>\n",
        "        <li><strong>Búsqueda de Árboles de Monte Carlo (MCTS):</strong> Permite explorar posibles movimientos y resultados sin analizar cada jugada en profundidad, lo que acelera la toma de decisiones.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>El Hito de AlphaGo contra Lee Sedol (2016)</h2>\n",
        "    <p>El momento clave para AlphaGo ocurrió en 2016, cuando se enfrentó al jugador profesional surcoreano <strong>Lee Sedol</strong>. En una serie de cinco partidas, AlphaGo venció a Lee Sedol 4-1, lo cual fue un momento histórico en el campo de la IA.</p>\n",
        "    <p>La partida 4 fue especialmente famosa porque Lee Sedol logró vencer a AlphaGo con una jugada sorprendente. Sin embargo, AlphaGo ganó el resto de las partidas, demostrando que las máquinas podían dominar un juego tan complejo.</p>\n",
        "\n",
        "    <h2>Avances Posteriores: AlphaGo Zero y AlphaZero</h2>\n",
        "    <ul>\n",
        "        <li><strong>AlphaGo Zero:</strong> A diferencia de AlphaGo, AlphaGo Zero fue entrenado desde cero sin datos humanos, solo conociendo las reglas del Go. Aprendió completamente por sí mismo y alcanzó un nivel superior en solo tres días.</li>\n",
        "        <li><strong>AlphaZero:</strong> AlphaZero es una versión generalizada de AlphaGo Zero, capaz de jugar múltiples juegos de estrategia (como ajedrez, shogi y Go) solo conociendo las reglas de cada juego. Superó a los mejores programas de IA en todos estos juegos.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>Impacto y Significado de AlphaGo</h2>\n",
        "    <p>La victoria de AlphaGo marcó un cambio de paradigma en inteligencia artificial, mostrando que las técnicas de <strong>aprendizaje profundo</strong> y <strong>aprendizaje por refuerzo</strong> pueden resolver problemas extremadamente complejos. Esto ha inspirado aplicaciones en diversas áreas:</p>\n",
        "    <ul>\n",
        "        <li><strong>Medicina:</strong> Diagnósticos y tratamientos personalizados.</li>\n",
        "        <li><strong>Ciencia de Materiales:</strong> Descubrimiento de nuevos materiales.</li>\n",
        "        <li><strong>Optimización de Sistemas:</strong> Energía, telecomunicaciones y logística.</li>\n",
        "        <li><strong>Investigación de IA:</strong> Desarrollo de nuevas arquitecturas y algoritmos.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2>Conclusión</h2>\n",
        "    <p><strong>AlphaGo</strong> es un ejemplo emblemático del poder de la IA moderna. Al demostrar que una IA puede aprender a jugar un juego tan complejo como el Go y derrotar a los mejores jugadores del mundo, DeepMind y AlphaGo lograron un avance técnico que abrió la puerta para que la IA enfrente desafíos en problemas complejos en el mundo real.</p>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Colab\n",
        "display(HTML(html_content))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "478ed345",
      "metadata": {
        "id": "478ed345"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}